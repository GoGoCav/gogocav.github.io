<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Note | Canvas Hsu]]></title>
  <link href="http://GoGoCav.github.io/blog/categories/note/atom.xml" rel="self"/>
  <link href="http://GoGoCav.github.io/"/>
  <updated>2014-10-14T22:38:14+08:00</updated>
  <id>http://GoGoCav.github.io/</id>
  <author>
    <name><![CDATA[Canvas Hsu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[笔记 - 类和属性的学习记录]]></title>
    <link href="http://GoGoCav.github.io/blog/2014/10/13/note-of-class/"/>
    <updated>2014-10-13T23:13:32+08:00</updated>
    <id>http://GoGoCav.github.io/blog/2014/10/13/note-of-class</id>
    <content type="html"><![CDATA[<h2>笔记索引</h2>

<ol>
<li>类的初始化</li>
<li>类的属性用来存储数据</li>
<li>属性的特征

<ul>
<li>readwrite, readonly</li>
<li>atomic, nonatomic</li>
<li>strong, weak</li>
<li>copy</li>
</ul>
</li>
</ol>


<!-- more -->


<h2>ObjC 是一门动态语言</h2>

<p>每一个对象都通过指针来寻址。在运行时，才会根据指针指向的内存内容来确定对象的类型。</p>

<p>因此给指针给绑定的类型其实不重要。只要没有违反类的接口定义（例如你给某个对象的指针指定为 NSString 类型但是用该指针调用了一个不存在于 NSString 类中的方法），都可以通过编译。并且即便类型不对，在运行时也会根据指针找到并对象确定其正确的类型。</p>

<h2>类的初始化</h2>

<h4>语法形式</h4>

<p>对象是存储在 heap 上的一片内存，通过指针跟踪。创建对象的一般形式：</p>

<pre><code class="objc">ClassName *pointToObject = [[ClassName alloc] init];
</code></pre>

<p>init 方法的一般格式：</p>

<pre><code class="objc">- (id) init 
{
    self = [super init];
    if (self) {
        // 初始化代码
    }
    return self;
}
</code></pre>

<h4>知识要点</h4>

<ol>
<li><p>存储位置：
本地变量：stack 。因此变量不需要手工管理内存。
对象：heap 。因此对象需要内存管理。</p></li>
<li><p>alloc 和 init 要套用。避免 init 返回的指针对象和 alloc 分配的不同。</p></li>
<li><p>NSString，NSNumber等可以通过常量赋值的方式完成创建和初始化：
NSString *string = @“Hello World!”;
NSNumber *num = @3.14;</p></li>
<li><p>只有不含属性和参数的对象才能使用 new 创建。
统一起见建议统一使用 alloc init 方式创建对象。</p></li>
<li><p>标量变量（scalar variable）在定义时最好立即赋初始值。否则内部是 stack 上的一片野值。</p></li>
<li><p>指针在定义时默认指向nil，所以不立即赋值也可以。</p></li>
<li><p>对比两个对象：
== 对比两个对象指针是不是指向同一个地址；
isEqual: 和 compare: 等方法才比较两个对象的内容。</p></li>
<li><p>工厂方法用 id 做返回类型，用self来指自己，以子类继承使用。</p></li>
</ol>


<h2>类的属性用来存储数据</h2>

<p>大多数属性背后都有一个用来存放数据的实例变量。
编译器会为属性自动合成一个名为 _属性名的实例变量，实例方法可以直接访问它。</p>

<p>例如 @property NSString *firstName; 背后由编译器自动合成的实例变量为 NSString *_firstName。</p>

<p>如果要自己指定属性背后的实例变量名，使用如下语法：
<code>objc
@implementaition SomeClass
@synthesize propertyName = instanceVariableName;
...
@end
</code></p>

<h4>知识要点</h4>

<ol>
<li><p>init 方法中：要用属性的实例变量访问，不要用存取方法访问属性。
因为这时候对象还没有完全初始化完成。</p></li>
<li><p>存取方法也可以人工自己编写。在实现区块中实现对应的存取方法即可。</p></li>
</ol>


<h4>注意事项</h4>

<ol>
<li>编译器在自动合成存取方法同时自动合成属性的实例变量。
因此，如果人工指定了一个属性所有存取方法（只读属性的 getter 或读写属性的 setter 和 getter），则编译器也不会自动合成该属性的实例变量。这种情况下需要手工合成属性的实例变量：</li>
</ol>


<pre><code class="objc">@synthesize property = _property;
</code></pre>

<h2>属性的特征</h2>

<p>属性有如下几种特征：
- readwrite（默认），readonly 读写性
- atomic（默认），noatomic 原子性
- strong（默认），weak 强弱关系
- copy 复制</p>

<h3>读写性</h3>

<p>一个只读的属性在被初始化以后就不能再被重新赋值了，即使是属性所属的实例对象也不能再写入它。</p>

<h4>知识要点</h4>

<ol>
<li>除了初始化函数以外的函数都无法再对只读的属性重新赋值。类内部的函数也不行。</li>
</ol>


<h4>注意事项</h4>

<ol>
<li>但是可以通过属性背后的实例变量来修改只读属性的值。</li>
</ol>


<h3>原子性</h3>

<p>属性默认是原子性的。但是原子性的属性在读写时会占用更多资源。所以如果确定不会出现属性的原子性问题，可以将属性声明为非原子性的来提升性能。</p>

<h4>注意事项</h4>

<ol>
<li><p>atomic 属性的 getter 和 setter 方法要么都自动合成，要么都自己实现，不能混合（例如自动合成一个，自己实现另一个）</p></li>
<li><p>一个对象的所有属性都是 atomic 的，也不等于该对象为线程安全（thread safety）。atomic 属性的保护单元是单个属性，属性与属性之间的同步性无法保证。</p></li>
</ol>


<h3>强弱关系</h3>

<p>对象保存在 heap 上，因此内存是动态分配的。
我们只能通过指针跟踪 heap 上的对象，因此没有办法完全通过指针来判断它所指向的对象的生命周期。即使指针被释放了，也不表示它原来指向的内存可以被释放。</p>

<p>那如何管理对象的生命周期呢？换一个角度来思考：简单来说，如果一个对象不再被任何人需要的时候，它就可以被释放了。因此，管理对象的生命周期这个问题，可以转变为管理对象与对象之间的关系。如果一个对象被另一个对象引用，说明它还有存在的意义，那么它的生命周期就不能结束。</p>

<p>如果一个对象 A 依赖另一个对象 B ，我们就称作对象 A 拥有（take ownership of）对象 B，也称作对象 A 强引用（have strong reference to）对象 B。
例如：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">XYZPerson</span>
</span><span class='line'><span class="k">@property</span> <span class="bp">NSString</span> <span class="o">*</span><span class="n">firstName</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">XYZPerson</span> <span class="o">*</span><span class="n">aPerson</span> <span class="o">=</span> <span class="p">[[</span><span class="n">XYZPerson</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="n">aPerson</span><span class="p">.</span><span class="n">firstName</span> <span class="o">=</span> <span class="p">@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Tommy</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;;</span>
</span></code></pre></td></tr></table></div></figure>
则 aPerson 这个对象强引用了 @“Tommy” 这个 NSString 对象。</p>

<p>那么如果对象 A 被释放，对象 B 就不被其他对象强引用了（假设之前只有 A 拥有 B），那么 B 也随之释放。这就是 Obj-C 中对对象的内存释放的规则。Obj-C 中默认引用关系是强引用。</p>

<p>那么如果两个对象互相依赖，即互相引用。最常见的两个对像互相引用的例子是 Delegation 设计模式中的委托对象（delegating object）和被委托对象（delegate object）。
如果两个对象互相强引用，就形成了一个强引用闭环，导致这两个对象都无法被释放。</p>

<p>因此引入了弱引用的概念：如果对象 A 弱引用对象 B，则 A 不构成对 B 的拥有。因此 B 的释放与否，与 A 是否引用自己无关。B 可以在 A 还弱引用着自己的情况下被释放。这样就可以打破强引用闭环。</p>

<p>在 Delegation 设计模式中，我们通常让委托对象弱引用它的被委托对象，被委托对象强引用委托自己的对象。</p>

<h4>语法格式</h4>

<p>声明弱引用：
<code>objc
    @property (weak) id someObject;
    NSObject * __weak someWeakVariable;
</code></p>

<h4>知识要点</h4>

<ol>
<li><p>如果指向一个对象的强引用数归零，则该对象也自动被释放。</p></li>
<li><p>弱引用不获得对被引用对象的所有权。因此被弱引用的对象可以在弱引用关系还存在的情况下被释放。当这种情况发生后，弱引用关系自动指向 nil。</p></li>
<li><p>有一部分的类不支持 weak 特征，只能使用 unsafe_unretained 特征。
unsafe_unretained 特征的差异是当被引用的对象被释后，引用对象不会自动指向nil，会变成一个野指针。</p></li>
</ol>


<h4>注意事项</h4>

<ol>
<li><p>由于 weak 变量会因为被引用的对象被释放而指向 nil，所以在使用 weak 变量时，有 weak 变量中途消失的风险。
为了防止这种风险，一般的做法是再声明一个新的对象强引用这个 weak 变量（相当于 cache 该 weak 变量所指向的对象，防止它被释放）。使用结束后将这个cache变量指针指向nil以释放对weak变量的强引用。</p></li>
<li><p>经典案例：
以下案例中新创建出来的对象由于没有任何其他对象强引用它，所以创建之后就被释放，因此someObject指向nil：
<code>
 NSObject * __weak someObject = [[NSObject alloc] init];
</code></p></li>
</ol>


<h2>复制</h2>

<p>如果希望一个属性对象首次被赋值后不因为赋给它的对象改变而改变，则可以在声明属性的时候加上 copy 特征字。具有 copy 特征的属性在首次赋值以后，会生成一份备份。之后如果被赋予的对象发生改变，也不会影响到该属性的值。</p>

<h4>语法格式</h4>

<pre><code>    @property (copy) NSObject someVariable;
</code></pre>

<h4>知识要点</h4>

<ol>
<li>只有支持 NSCopying 协议的对象才能被声明copy属性。</li>
</ol>


<h4>注意事项</h4>

<ol>
<li>如果对 copy 属性做初始化，一定要记得在初始化赋值的时候使用 copy 消息。
因为在 init 的时候是直接向属性背后的实例变量赋值。如果没有给被赋入的对象发送 copy 消息，会导致属性的 copy 特征失效。
举例：</li>
</ol>


<pre><code>    - (id)initWithString:(NSString *)aString 
    {
        self = [super init];
        if (self) {
            _instanceVariableForCopyProperty = [aMutableString copy];
        }
        return self;
    }
</code></pre>

<p>如果上例中直接采用 _instanceVariableForCopyProperty = aMutableString; 这样的初始化赋值，会导致 instanceVariableForCopyProperty 指向了一个可变字符串，当可变字符串变化时，该属性也随之变化。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[笔记 - Category and Class Extention]]></title>
    <link href="http://GoGoCav.github.io/blog/2014/10/13/note-of-category-and-class-extention/"/>
    <updated>2014-10-13T00:57:30+08:00</updated>
    <id>http://GoGoCav.github.io/blog/2014/10/13/note-of-category-and-class-extention</id>
    <content type="html"><![CDATA[<p>Objective-C 中如果想对类进行自定义和功能扩展，有2种常用技术：</p>

<ul>
<li>category 类别</li>
<li>class extention 类扩展</li>
</ul>


<p>两者有相似之处，也有区别。</p>

<h3>1. category 类别</h3>

<p>Category 可以给任何类（包括不是由你自己实现的类，比如框架类）增加方法或函数。该类和子类的所有实例都可以使用它们。在运行时，这些方法和函数与类原生的方法和函数没有任何差别。</p>

<!-- more -->


<h4>语法形式：</h4>

<p><em>ClassName+XYZCategoryName.h</em> (命名形式仅供参考，下同)</p>

<pre><code class="objc">@interface ClassName (XYZCategoryName)

# Category 不支持定义新的属性或实例变量

- (SomeClass *)xyz_someAdditionInstanceMethod;
+ (SomeClass *)xyz_someAdditionClassMethod; # Category 支持类方法

@end
</code></pre>

<p></br></p>

<p><em>ClassName+XYZCategoryName.m</em></p>

<pre><code class="objc">#import "ClassName+XYZCategoryName.h"

@implementation ClassName (XYZCategoryName)
- (SomeClass *)xyz_someAdditionInstanceMethod {
    # implement code here
}

+ (SomeClass *)xyz_someAdditionClassMethod {
    # implement code here
}
@end
</code></pre>

<h4>应用场景：</h4>

<ol>
<li>为类扩充功能。</li>
<li>如果一个类的功能复杂，可以将功能分类、拆分到不同的 categories 中，分别在独立的文件中声明和实现。</li>
</ol>


<h4>注意事项：</h4>

<ol>
<li>Category 不支持声明新的类属性或实例变量。（类扩展技术 Class Extensions 支持）。</li>
<li>Category 中新定义的方法或函数不能重名，建议对 category 名字和方法都增加前缀。</li>
</ol>


<p></br></p>

<h3>2. Class Extension 类扩展</h3>

<p>Class Extension 顾名思义是对类进行扩展，可以为有实现代码的类再声明一些新的属性、实例参数、方法或函数。</p>

<p>类扩展又被称为匿名类别（anonymous category），因为类扩展的声明就如同声明一个名字为空的类别。也因此，类扩展新声明的方法和函数的实现，写在类本身的@implementation 代码段中。</p>

<p>类扩展的 @interface 声明部分通常放到类实现所在的文件中，以达到类扩展私有化的目的。这也是类扩展最常用的场景。如果实在需要被外部的类访问类扩展的方法，则可以将类扩展的接口声明放到单独的 .h 头文件中，被需要它的代码引用。</p>

<h4>语法形式：</h4>

<pre><code class="objc">@interface ClassName () { # 类扩展也被称为匿名类别（anonymous categories）
    id _someExtendInstanceVariable; # 类扩展支持添加实例变量
}

@property SomeClass *someExtendProperty; # 类扩展支持添加属性

- (SomeObject *)someExtendMethod;

@end

...

@implementation ClassName

...

- (SomeObject *)someExtendMethod {
    # implement code here
}
...

@end
</code></pre>

<h4>应用场景：</h4>

<ol>
<li>通过类扩展隐藏一些私有信息。
例如想实现某个类属性对外只读、对内可写入的效果，则可以在类扩展中以 readwrite 重定义这个属性，为其添加写入权限，但将类扩展的接口声明放到类实现文件中，达到私有化的效果。因此做到了这个属性对外只读、对内可读写。</li>
<li>如果需要对某些特定的外部的类开通对类扩展私有方法或函数的访问，则可以将类扩展的接口声明放到独立的头文件中，供需要的代码引用。</li>
</ol>


<h4>注意事项：</h4>

<ol>
<li>类扩展可以声明新的属性和实例变量。这一点和类别不同。</li>
<li>类扩展只能用在拥有实现源代码的类上面，像框架类这种没有实现源码的类是不能扩展的。类扩展声明的新属性和实例变量需要和类的方法实现同时编译，这样编译器才能合成新属性的存取方法和实例变量。</li>
<li>类扩展的实现部分直接放到类本身的 @implementation 区块中。</li>
<li>如果外部对象访问类扩展的私有属性或方法，编译器会报警。但其实也有办法通过动态运行时的特征（例如利用 NSObjet 的 performSelector:&hellip; 方法）实现外部对象对私有的类扩展方法的调用。</li>
</ol>

]]></content>
  </entry>
  
</feed>
